@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1, h2, h3, h4, h5, h6, p, ul, ol, dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not([fill=none], [fill^=url])) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not([stroke=none], [stroke^=url])) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@font-face {
  font-family: "Montserrat Alternates";
  src: url(../fonts/MontserratAlternates-Bold.woff2);
  font-style: normal;
  font-weight: bold;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat Alternates";
  src: url(../fonts/MontserratAlternates-Medium.woff2);
  font-style: normal;
  font-weight: normal;
  font-display: swap;
}
:root {
  --color-dark: #000000;
  --color-gray: #4d4d4d;
  --color-blue: #81adc8;
  --color-accent: #cd4631;
  --color-light-main: #edf3f7;
  --color-light-second: #f7ede8;
  --border: 0.125rem solid var(--color-dark);
  --container-width: 72.5rem;
  --container-padding-x: 1rem;
  --transition-duration: 0.2s;
  --font-famaly-main: "Montserrat Alternates", sans-serif;
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (width <= 47.99875rem) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (width > 47.99875rem) {
  .visible-mobile {
    display: none !important;
  }
}

html.is-lock {
  overflow: hidden;
}

body {
  font-size: clamp(0.875rem, 0.8285714286rem + 0.1904761905vw, 1rem);
  display: flex;
  flex-direction: column;
  font-family: var(--font-famaly-main);
  letter-spacing: 0;
  color: var(--color-dark);
  background-color: var(--color-light-main);
}

main {
  flex-grow: 1;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  color: var(--color-dark);
}

h1,
.h1,
h2,
.h2,
h3,
.h3 {
  font-family: var(--font-famaly-main);
  font-weight: 500;
}

h4,
.h4,
h5,
.h5,
h6,
.h6 {
  font-weight: 600;
}

h1,
.h1 {
  font-size: clamp(2.8125rem, 1.6285714286rem + 4.8571428571vw, 6rem);
  line-height: 1.2;
}

h2,
.h2 {
  font-size: clamp(1.8125rem, 1.1160714286rem + 2.8571428571vw, 3.6875rem);
  line-height: 1.3;
}

h3,
.h3 {
  font-size: clamp(1.3125rem, 0.9410714286rem + 1.5238095238vw, 2.3125rem);
}

h4,
.h4 {
  font-size: clamp(1.125rem, 1.0089285714rem + 0.4761904762vw, 1.4375rem);
}

h5,
.h5 {
  font-size: clamp(1.125rem, 1.0089285714rem + 0.4761904762vw, 1.4375rem);
}

h6,
.h6 {
  font-size: clamp(1rem, 0.9071428571rem + 0.380952381vw, 1.25rem);
}

a,
button,
label,
input,
textarea,
select,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  color: inherit;
}
@media (any-hover: hover) {
  a:hover {
    color: var(--color-accent);
  }
}
@media (any-hover: none) {
  a:active {
    color: var(--color-accent);
  }
}
a[class] {
  text-decoration: none;
}

:focus-visible {
  outline: 0.125rem dashed var(--color-light);
  outline-offset: 0.25rem;
  transition-duration: 0s !important;
}

a[aria-label],
button[aria-label] {
  position: relative;
}
a[aria-label]::before,
button[aria-label]::before {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  width: 2.75rem;
  height: 2.75rem;
  content: "";
}

.header {
  background-color: var(--color-light-second);
}
.header__body {
  display: flex;
  column-gap: 7.5rem;
  justify-content: start;
  align-items: center;
  padding-block: 1.5rem;
}
@media (width <= 63.99875rem) {
  .header__body {
    column-gap: 3.75rem;
  }
}
@media (width > 47.99875rem) {
  .header__overlay {
    display: contents;
  }
}
.header__menu {
  display: flex;
  justify-content: space-between;
  width: 100%;
}
@media (width <= 47.99875rem) {
  .header__menu {
    flex-direction: column;
    row-gap: 1rem;
  }
}
.header__menu-list {
  display: flex;
  align-items: center;
  justify-content: center;
  column-gap: 3.75rem;
  font-weight: 600;
}
@media (width <= 63.99875rem) {
  .header__menu-list {
    column-gap: 2.5rem;
  }
}
@media (width <= 47.99875rem) {
  .header__menu-list {
    flex-direction: column;
    row-gap: 1rem;
  }
}
.header__button-list {
  display: flex;
  column-gap: 1.25rem;
}
@media (width <= 63.99875rem) {
  .header__button-list {
    column-gap: 0.625rem;
  }
}
@media (width <= 47.99875rem) {
  .header__button-list {
    flex-direction: column;
    align-items: center;
    row-gap: 1rem;
  }
}

.button {
  font-weight: 600;
  font-size: 0.875rem;
  padding: 0.75rem 1.5rem;
  border: 2px solid var(--color-dark);
  border-radius: 8px;
  text-align: center;
}
.button--dark {
  background-color: var(--color-dark);
  color: var(--color-light-main);
}
.button--light {
  background-color: transparent;
  color: var(--color-dark);
}

.logo {
  max-width: clamp(3.75rem, 3.425rem + 1.3333333333vw, 4.625rem);
}

/*# sourceMappingURL=main.css.map */
